// x,y   任意X 对应确定的Y   X就是自变量  Y就是X的函数
// Y = f(x)  数学
// 看成计算机的函数式编程 Y= function(参数) x值的范围就是函数的定义域，Y的范围就是函数的值域

// 函数式编程
// function y(a,b,c){
//   // 执行语句 
// }

// 如果有下面这一系列的代码
if(3>0){
  for(let i = 0;i < 10;i++){
    console.log(i)
  }
}
if(2>0){
  for(let i = 0;i < 10;i++){
    console.log(i)
  }
}
if(1>0){
  for(let i = 0;i < 10;i++){
    console.log(i)
  }
}

// 会出现一个情况，重复的代码太多了；
// 耦合 ；评估代码重复量
// 编程的基础规范：高内聚，低耦合
// 高内聚：我们开发的一个功能或者说是一个模块，里面的代码相关性强，代码之间紧密联系度比较强，就会让这个模块或者这个功能的独立性就比较强。
// 我们希望让这个模块去独立完成任务，这个任务完成的好坏是和高内聚有密切关系的。
// 低耦合：我们希望把重复的代码抽象出来，提取出来后组成一个独立的功能体或者是一个模块，去完成一个特定的功能，高可复用。   

// 高内聚 低耦合的作用就是让一个代码块或者说一个模块有强的功能性,有高的独立性   [模块代码的单一责任制]
// 尽量避免功能体与功能体之间的相互依赖 

// 处理上面这种高耦合的代码,一般用的方法就是[解耦合]
// JavaScript里面解耦合最好的方法就是函数
function test(){
  for(let i = 0;i < 10;i++){
    console.log(i)
  }
}
if(3 > 0){
  test();
}
if(2 > 0){
  test();
}